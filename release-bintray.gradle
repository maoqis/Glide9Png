apply plugin: 'com.android.library'

// Upload to Maven-Central
apply plugin: 'maven-publish'
apply plugin: 'signing'

//配置from local.properties
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = '' //
//TODO: end

//配置from project gradle
version = VERSION_NAME

//配置from gradle.properties
group = GROUP

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}



// Android tasks for Javadoc and sources.jar generation

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        exclude '**/pom.xml'
        exclude '**/proguard_annotations.pro'
        classpath += files(android.bootClasspath)
    }

    task androidJavadocsJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts.add('archives', androidJavadocsJar)
    artifacts.add('archives', androidSourcesJar)
}





// JIRA: https://issues.sonatype.org/browse/OSSRH-65440?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel
// Sonatype: https://s01.oss.sonatype.org/


def getReleaseRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
}


publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            // Two artifacts, the `aar` and the sources
            afterEvaluate {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
            }

            //            // 必须有这个 否则不会上传AAR包


            // Self-explanatory metadata for the most part
            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                // If your project has a dedicated site, use its URL here
                url = POM_URL
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = POM_SCM_URL
                    developerConnection = POM_SCM_CONNECTION
                    //分支地址：
                    url = POM_SCM_DEV_CONNECTION
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "MavenCentral"

            def releasesRepoUrl = getReleaseRepositoryUrl()
            //"https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = getSnapshotRepositoryUrl()
            //"https://oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
//                def ossrhUsername = getRepositoryUsername()
//                def ossrhPassword = getRepositoryPassword()
            print("ossrhUsername=" + ossrhUsername + " $VERSION_NAME" + " 没想到子仓库的的子moudle会调用子仓库的gradle。子仓库的属性变量也能加载 " + url)
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

afterEvaluate {
    signing {
        sign publishing.publications
    }
}


afterEvaluate {
    Task build = project.tasks.getByName("build")

    Task assemble = project.tasks.getByName("assemble")
    Task signReleasePublication = project.tasks.getByName("signReleasePublication")
    Task bundleReleaseAar = project.tasks.getByName("bundleReleaseAar")
    signReleasePublication.dependsOn(bundleReleaseAar)
    project.tasks.findAll {
        it.name.startsWith("publish")
    }.each {
        it.dependsOn(build)
        it.dependsOn(assemble)
        it.dependsOn(signReleasePublication)
        it.dependsOn(bundleReleaseAar)
    }
}