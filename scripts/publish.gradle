apply plugin: 'maven-publish'
apply plugin: 'signing'

//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.source
//}

//TODO: start 配置maven仓库gpg签名和仓库用户名密码
ext["signing.keyId"] = 'C2D0199D'
ext["signing.password"] = 'qq151730464'
ext["signing.secretKeyRingFile"] = '/Users/maoqis/Documents/work/maven/com.github.maoqis/keyfile.gpg'
ext["ossrhUsername"] = 'maoqis'
ext["ossrhPassword"] = ''
//TODO: end

version = VERSION_NAME
group = GROUP

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

// JIRA: https://issues.sonatype.org/browse/OSSRH-65440?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel
// Sonatype: https://s01.oss.sonatype.org/


def getReleaseRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return hasProperty('LOCAL') ? localMavenRepo()
            : hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME : (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : '')
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD : (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : '')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up in a moment
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version VERSION_NAME

                // Two artifacts, the `aar` and the sources
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact androidSourcesJar
                //            // 必须有这个 否则不会上传AAR包


                // Self-explanatory metadata for the most part
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    // If your project has a dedicated site, use its URL here
                    url = POM_URL
                    licenses {
                        license {
                            //协议类型，一般默认Apache License2.0的话不用改：
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        //修改成你的Git地址：
                        connection = POM_SCM_URL
                        developerConnection = POM_SCM_CONNECTION
                        //分支地址：
                        url = POM_SCM_DEV_CONNECTION
                    }
                    // A slightly hacky fix so that your POM will include any transitive dependencies
                    // that your library builds upon
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            // The repository to publish to, Sonatype/MavenCentral
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "MavenCentral"

                def releasesRepoUrl = getReleaseRepositoryUrl()
                //"https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                //"https://oss.sonatype.org/content/repositories/snapshots/"
                // You only need this if you want to publish snapshots, otherwise just set the URL
                // to the release repo directly
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                // The username and password we've fetched earlier
//                def ossrhUsername = getRepositoryUsername()
//                def ossrhPassword = getRepositoryPassword()
                print("ossrhUsername=" + ossrhUsername +" $VERSION_NAME" +" 没想到子仓库的的子moudle会调用子仓库的gradle。子仓库的属性变量也能加载")
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
    signing {
        sign publishing.publications
    }
}